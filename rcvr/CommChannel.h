///////////////////////////////////////////////////////////////
///  This file defines a class that is used to implement the
///  channel interface.
///
/// @author
///         $Author: Mike Moore $
///
/// Contact: mike.moore@so.engineering
///
/// Created on: Sunday June 12 2016
///
///////////////////////////////////////////////////////////////
#ifndef COMM_CHANNEL_HH
#define COMM_CHANNEL_HH

#include "comm_packet.pb.h"
#include <sstream>
#include <iostream>
#include <unistd.h>
#include "MessageHandler.h"
#include <thread>

#define COMM_MAX_BUFF_SIZE 255
#define MIN_COMM_FREQ 100.0e-6
#define MAX_COMM_FREQ 100.0e6

///////////////////////////////////////////////////////////////
/// @class CommChannel
/// @ingroup Communication
/// @brief Definition of base class for a communications channel.
///////////////////////////////////////////////////////////////
class CommChannel {

 public:
  //////////////////////////////////////////////////////////
  /// @brief The default c'tor constructs the CommChannel
  ///        class.
  ////////////////////////////////////////////////////////////
  CommChannel();
  //////////////////////////////////////////////////////////
  /// @brief The default d'tor destructs the CommChannel
  ///        class.
  ////////////////////////////////////////////////////////////
  ~CommChannel();
  //////////////////////////////////////////////////////////
  /// @brief Intended to be implemented by derived class.
  ///        routine should do hardware/channel specific
  ///        hand-shaking in order to intialize a connection.
  ////////////////////////////////////////////////////////////
  virtual void Connect();
  ////////////////////////////////////////////////////////////
  /// @brief Primary communication update routine. This is 
  ///        the function that exchanges the data back and
  ///        forth cyclically at the CommFrequency rate.
  ////////////////////////////////////////////////////////////
  virtual std::thread CreateCommThread();
  ////////////////////////////////////////////////////////////
  /// @brief Transmit a packet. Intended to be implemented by
  /// the derived class.
  ////////////////////////////////////////////////////////////
  virtual void Tx();
  ////////////////////////////////////////////////////////////
  /// @brief Receive a packet. Intended to be implemented by
  /// the derived class.
  ////////////////////////////////////////////////////////////
  virtual void Rx();
  ////////////////////////////////////////////////////////////
  /// @brief Accessor method for comm failure flag.
  ////////////////////////////////////////////////////////////
  inline bool CommFailure() { return CommFailureFlag; }
  ////////////////////////////////////////////////////////////
  /// @brief Flag set upon succesfully connecting to the
  ///        device.
  ////////////////////////////////////////////////////////////
  bool Connected;
  ////////////////////////////////////////////////////////////
  /// @brief Flag used for activating/de-activating comm loop
  ////////////////////////////////////////////////////////////
  bool Active;
  ////////////////////////////////////////////////////////////
  /// @brief Frequency of the serial communication. Defines
  ///        how long we sleep between a single bi-directional
  ///        communication frame.
  ////////////////////////////////////////////////////////////
  float CommFrequency;
  ////////////////////////////////////////////////////////////
  /// @brief Failed comm counter
  ////////////////////////////////////////////////////////////
  uint32_t CommFailureCounter;
  ////////////////////////////////////////////////////////////
  /// @brief Protobuff command and telemetry packets. Defined
  ///        in intf/chup_sci.proto
  ////////////////////////////////////////////////////////////
  CommandPacket Commands;
  TelemetryPacket Telemetry;

 protected:
  //////////////////////////////////////////////////////////
  /// @brief Intended to be implemented by derived class.
  ///        routine should do hardware/channel specific
  ///        validation and error reporting.
  ////////////////////////////////////////////////////////////
  virtual void Validate();
  //////////////////////////////////////////////////////////
  /// @brief Function that implements what to do in the
  ///        event of a comm failure.
  ////////////////////////////////////////////////////////////
  virtual void ClearBuffersAndReset();
  //////////////////////////////////////////////////////////
  /// @brief Clears Tx and Rx buffers.
  ////////////////////////////////////////////////////////////
  virtual void ClearBuffers();
  //////////////////////////////////////////////////////////
  /// @brief Spawns a thread to cyclically call the Tx and
  ///        Rx functions at the CommFrequency rate.
  ////////////////////////////////////////////////////////////
  void TxAndRx();
  ////////////////////////////////////////////////////////////
  /// @brief Header placed on command packets sent to the 
  ///        Chup. Constance value used is SOE!
  ///        in hex : 0x534F4521
  ///        in dec : 1397703969
  ////////////////////////////////////////////////////////////
  uint32_t PacketHeader;
  ////////////////////////////////////////////////////////////
  /// @brief Tx and Rx buffers of raw bytes
  ////////////////////////////////////////////////////////////
  unsigned char TxBuffer[COMM_MAX_BUFF_SIZE];
  unsigned char RxBuffer[COMM_MAX_BUFF_SIZE];
  ////////////////////////////////////////////////////////////
  /// @brief Failed comm flag
  ////////////////////////////////////////////////////////////
  bool CommFailureFlag;
  ////////////////////////////////////////////////////////////
  /// @brief Strings used for error reporting.
  ////////////////////////////////////////////////////////////
  std::stringstream errorOut;
  std::string errorLocation;
  std::string errorMessage;
};

#endif  // COMM_CHANNEL_HH
